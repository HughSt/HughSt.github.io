map_data()$sp_Polygons_df$probability
uncertainty <- abs(map_data()$sp_Polygons_df$probability - 0.5)
output_table <-
map_data()$sp_Polygons_df[order(uncertainty),][1:5, c(2, 1)]
output_table[, 2] <- round(output_table[, 2], 2)
names(output_table) <-
c("Village ID", "Probability of being a hotspot")
order(uncertainty)
map_data()$sp_Polygons_df[order(uncertainty),]
map_data()$sp_Polygons_df[order(uncertainty),][1:5, c(2, 1)]
map_data()$sp_Polygons_df@data[order(uncertainty),][1:5, c(2, 1)]
output_table <-
map_data()$sp_Polygons_df@data[order(uncertainty),][1:5, c(2, 1)]
output_table[, 2] <- round(output_table[, 2], 2)
output_table[, 2]
output_table[1:5,]
output_table <-
map_data()$sp_Polygons_df@data[order(uncertainty),][1:5, c(2, 1)]
output_table
head(map_data()$sp_Polygons_df@data[order(uncertainty),])
output_table <-
map_data()$sp_Polygons_df@data[order(uncertainty),][1:5, 1:2]
output_table[, 2]
output_table[, 2] <- round(output_table[, 2], 2)
names(output_table) <-
c("Village ID", "Probability of being a hotspot")
hotspot_index <-
which(map_data()$sp_Polygons_df$probability >= input$prob_threshold / 100)
hotspot_index <-
which(map_data()$sp_Polygons_df$probability >= 50 / 100)
hotspot_index
hotspot_table <- map_data()$sp_Polygons_df@data[hotspot_index, 2:1]
head(hotspot_table)
hotspot_table <- map_data()$sp_Polygons_df@data[hotspot_index, 1:2]
hotspot_table[, 2] <- round(hotspot_table[, 2], 2)
names(hotspot_table) <-
c("Village ID", "Probability of being a hotspot")
hotspot_table
runApp()
runApp()
sp_Polygons <-
buff_voronoi_test(
data.frame(
x = pred_points$lng,
y = pred_points$lat,
id = pred_points$ID
),
w_buff = 0.15
)
# create spdf
spdf_data <-
data.frame(
probability = result$estimates$exceedance_prob,
id = result$estimates$id,
class = result$estimates$category
)
# Merge
sp_Polygons_df <- merge(sp_Polygons, spdf_data, by="id")
map_data <- function(){return(
list(
points = points,
pred_points = pred_points,
#sp_Polygons = sp_Polygons,
#spdf_data = spdf_data
sp_Polygons_df = sp_Polygons_df
)
)}
# Define color palette
pal <-
colorNumeric(wes_palette("Zissou1", 10, type = "continuous")[1:10],
seq(0, 1, 0.01))
labels <- sprintf(
"<strong>%s</strong><br/>Hotspot probability %g",
map_data()$sp_Polygons_df$id,
round(map_data()$sp_Polygons_df$probability, 3)
) %>% lapply(htmltools::HTML)
map %>% addPolygons(
data = map_data()$sp_Polygons_df,
color = pal(hotspot_class),
fillOpacity = 0.6,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7
),
label = labels
) %>%
addCircleMarkers(
map_data()$points$lng,
map_data()$points$lat,
group = "Survey points",
col = "black",
radius = 2
) %>%
addLegend(colors = pal(c(0, 1)),
labels = c("Not hotspot", "Hotspot")) %>%
addLayersControl(overlayGroups = c("Survey points"),
options = layersControlOptions(collapsed = F))
})
runApp()
?nb2listw
# # Attach libraries for visualisation
library(spatstat)
library(geosphere)
library(leaflet)
library(car)
library(SpatialEpi)
library(geoR)
library(spdep) # Spatial Dependence: Weighting Schemes, Statistics and Models
library(ape) # Analyses of Phylogenetics and Evolution
library(pgirmess) # Data Analysis in Ecology
library(smacpod) # Spatial scanning statistic
?nb2listw
?kulldorff
?spscan.test
data(pennLC)
data <- pennLC$data
data
head(data)
table(data$age)
table(data$county)
?expected
n.strata <- 16
expected.cases <- expected(data$population, data$cases, n.strata)
expected.cases
dim(data)
1072/16
expected(BF_malaria_data$examined, BF_malaria_data$positives, nrow(BF_malaria_data))
# Global measures of clustering for point (prevalence etc.) data
# Open BF malaria data
BF_malaria_data <- read.csv("BF_malaria_data.csv",
header=T)
setwd("/Users/hughsturrock/Documents/Work/MEI/DiSARM/GitRepos/spatial-epi-course/course_materials/week4/Lab_files")
# Global measures of clustering for point (prevalence etc.) data
# Open BF malaria data
BF_malaria_data <- read.csv("BF_malaria_data.csv",
header=T)
expected(BF_malaria_data$examined, BF_malaria_data$positives, nrow(BF_malaria_data))
nrow(BF_malaria_data)
expected(BF_malaria_data$examined, BF_malaria_data$positives, 1
)
sum(BF_malaria_data$positives)
sum(BF_malaria_data$examined)
25674/58463
BF_malaria_data$examined*0.4391495
pennLC$geo
geo <- pennLC$geo[,2:3]
# Calculate moran's I using a binary distance matrix
load("Scotland.RData")
# Remind ourselves what this looks like
scot_col_pal <- colorQuantile(topo.colors(4), scotland$SMR)
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6)
summary(scotland$SMR)
# Remind ourselves what this looks like
scot_col_pal <- colorBin(topo.colors(4), scotland$SMR, bins = c(0, 50, 100, 200, 700))
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend
scot_col_pal(scotland$SMR)
scot_col_pal <- colorBin(topo.colors(4), scotland$SMR, bins = c(0, 50, 100, 200, 700))
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6)
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
colors = topo.colors(4), title = "SMR")
topo.colors(4)
?addLegend
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, title = "SMR")
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal(scotland$SMR), title = "SMR")
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR")
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft")
head(scotland)
# In addition, you can use Poisson data
# such as incidence data (cases per person time)
# First, as we are working with areal data
# get the centroid of each area
scotland_centroids
# We can plot the neighbourhood network using the
# centroids
scotland_centroids <- coordinates(gCentroid(scotland, byid=T))
# In addition, you can use Poisson data
# such as incidence data (cases per person time)
# As we are working with areal data, we use
# centroids for Kulldorf. For Poisson data,
# we also need the expected numbers of cases
# assuming there was no variation in risk. These happen
# to be included in the scotland data, but if these are not
# available you can use the 'exepcted' function which
# calculates the overall incidence rate and applies
# that to each area's population
expected(scotland$COUNT, scotland$PY, 1)
scotland$EXP
scotland$PY
scotland$COUNT
?expected
# In addition, you can use Poisson data
# such as incidence data (cases per person time)
# As we are working with areal data, we use
# centroids for Kulldorf. For Poisson data,
# we also need the expected numbers of cases
# assuming there was no variation in risk. These happen
# to be included in the scotland data, but if these are not
# available you can use the 'exepcted' function which
# calculates the overall incidence rate and applies
# that to each area's population
expected(scotland$PY, scotland$COUNT,  1)
plot(expected(scotland$PY, scotland$COUNT,  1), scotland$EXP)
scotland$EXP
mean(scotland$COUNT / scotland$PY)
scotland$PY* 5.977358e-05
sum(scotland$COUNT) / sum(scotland$PY)
3.578129e-05*scotland$PY
scotland$EXP
?scotland
data("scotland")
scotland$data
# such as incidence data (cases per person time)
# As we are working with areal data, we use
# centroids for Kulldorf. For Poisson data,
# we also need the expected numbers of cases
# assuming there was no variation in risk. These happen
# to be included in the scotland data, but if these are not
# available you can calculate manually or
# use the 'exepcted' function which
# calculates the overall incidence rate and applies
# that to each area's population
overall_inc <- sum(scotland$COUNT) / sum(scotland$PY)
overall_inc
# Calculate moran's I using a binary distance matrix
load("Scotland.RData")
overall_inc
# such as incidence data (cases per person time)
# As we are working with areal data, we use
# centroids for Kulldorf. For Poisson data,
# we also need the expected numbers of cases
# assuming there was no variation in risk. These happen
# to be included in the scotland data, but if these are not
# available you can calculate manually or
# use the 'exepcted' function which
# calculates the overall incidence rate and applies
# that to each area's population
overall_inc <- sum(scotland$COUNT) / sum(scotland$PY)
overall_inc
expected_cases <- scotland$PY * overall_inc
expected_cases
scotland$PY * overall_inc
# or using 'expected'
expected(scotland$PY, scotland$COUNT,  1)
?kulldorff
# We can plot the neighbourhood network using the
# centroids
scotland_centroids <- coordinates(gCentroid(scotland, byid=T))
scotland_centroids
# Now we can run Kulldorf
kulldorf_out_pois <- kulldorff(geo = scotland_centroids,
cases = scotland$COUNT,
population = scotland$PY,
expected.cases = scotland$EXP,
pop.upper.bound=0.5,
n.simulat=999,
alpha.level=0.05,
plot=TRUE)
# Now we can run Kulldorf
kulldorf_out_pois <- kulldorff(geo = scotland_centroids,
cases = scotland$COUNT,
population = scotland$PY,
expected.cases = scotland$EXP,
pop.upper.bound=0.5,
n.simulat=999,
alpha.level=0.05)
# Take a look
kulldorf_out_pois$most.likely.cluster
# Plot
cluster <- kulldorf_out$most.likely.cluster$location.IDs.included
# Plot
cluster <- kulldorf_out_pois$most.likely.cluster$location.IDs.included
# Plot
cluster_pois <- kulldorf_out_pois$most.likely.cluster$location.IDs.included
cluster_pois
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft") %>%
addPolygons(data=scotland[cluster_pois,],
color = "darkpink")
leaflet() %>% addProviderTiles("Stamen.Toner") %>%   addPolygons(data=scotland[cluster_pois,],
color = "darkpink")
leaflet() %>% addProviderTiles("Stamen.Toner") %>%   addPolygons(data=scotland[cluster_pois,],
color = "dark pink")
leaflet() %>% addProviderTiles("Stamen.Toner") %>%   addPolygons(data=scotland[cluster_pois,],
color = "pink")
leaflet() %>% addProviderTiles("Stamen.Toner") %>%   addPolygons(data=scotland[cluster_pois,],
color = "pink", opacity=1)
leaflet() %>% addProviderTiles("Stamen.Toner") %>%   addPolygons(data=scotland[cluster_pois,],
color = "fushia", opacity=1)
leaflet() %>% addProviderTiles("Stamen.Toner") %>%   addPolygons(data=scotland[cluster_pois,],
color = "red", opacity=1)
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft") %>%
addPolygons(data=scotland[cluster_pois,],
color = "red")
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft")
cluster_pois
plot(scotland)
lines(scotland[cluster_pois,],lwd=2, col="red")
points(scotland_centroids[cluster_pois,])
kulldorf_out_pois <- kulldorff(geo = scotland_centroids,
cases = scotland$COUNT,
population = scotland$PY,
expected.cases = scotland$EXP,
pop.upper.bound=0.2,
n.simulat=999,
alpha.level=0.05)
# Take a look
kulldorf_out_pois$most.likely.cluster
# Plot
cluster_pois <- kulldorf_out_pois$most.likely.cluster$location.IDs.included
# Plot
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft") %>%
addPolygons(data=scotland[cluster_pois,],
color = "red")
scotland$PY
kulldorf_out_pois <- kulldorff(geo = scotland_centroids,
cases = scotland$COUNT,
population = scotland$PY,
expected.cases = scotland$EXP,
pop.upper.bound=0.1,
n.simulat=999,
alpha.level=0.05)
# Take a look
kulldorf_out_pois$most.likely.cluster
# Plot
cluster_pois <- kulldorf_out_pois$most.likely.cluster$location.IDs.included
# Plot
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft") %>%
addPolygons(data=scotland[cluster_pois,],
color = "red")
# Now we can run Kulldorf
kulldorf_out_pois <- kulldorff(geo = scotland_centroids,
cases = scotland$COUNT,
population = scotland$PY,
expected.cases = scotland$EXP,
pop.upper.bound=0.05,
n.simulat=999,
alpha.level=0.05)
# Take a look
kulldorf_out_pois$most.likely.cluster
# Plot
cluster_pois <- kulldorf_out_pois$most.likely.cluster$location.IDs.included
cluster_pois
# Plot
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft") %>%
addPolygons(data=scotland[cluster_pois,],
color = "red")
# Now we can run Kulldorf
kulldorf_out_pois <- kulldorff(geo = scotland_centroids,
cases = scotland$COUNT,
population = scotland$PY,
expected.cases = scotland$EXP,
pop.upper.bound=0.1,
n.simulat=999,
alpha.level=0.05)
# Take a look
kulldorf_out_pois$most.likely.cluster
# Plot
cluster_pois <- kulldorf_out_pois$most.likely.cluster$location.IDs.included
sum(scotland$PY[cluster_pois])
sum(scotland$PY)
# Plot
cluster_pois <- kulldorf_out_pois$most.likely.cluster$location.IDs.included
# Plot
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft") %>%
addPolygons(data=scotland[cluster_pois,],
color = "red")
# Plot
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col="gray", weight=2, fillOpacity = 0.6) %>%
# addLegend(labels = c("<50", "50-100", "100-200", ">200"),
#           pal = scot_col_pal, values=scotland$SMR, title = "SMR",
#           "topleft") %>%
addPolygons(data=scotland[cluster_pois,],
color = "red")
cluster_pois
plot(scotland[4,])
plot(scotland[6,])
plot(scotland[45,])
plot(scotland[51,])
plot(scotland[5,])
plot(scotland[54,])
# Plot
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col="gray", weight=2, fillOpacity = 0.6) %>%
addPolygons(data=scotland[cluster_pois,],
color = "red")
6/36
11/232
# You can also use Kulldorf's scan statistic
# for prevalence data, using the kulldorf function
# from the SpatialEpi package
kulldorf_out <- kulldorff(BF_malaria_data[,c("longitude", "latitude")],
cases = BF_malaria_data$positives,
population =BF_malaria_data$examined,
pop.upper.bound=0.5,
n.simulat=999,
alpha.level=0.05,
plot=TRUE)
# Take a look
kulldorf_out$most.likely.cluster
# Plot
cluster <- kulldorf_out$most.likely.cluster$location.IDs.included
cluster_colors <- rep("blue",nrow(BF_malaria_data) )
cluster_colors[cluster] <- "red"
leaflet(BF_malaria_data) %>% addProviderTiles("Stamen.Toner") %>%  addCircleMarkers(~longitude, ~latitude,
color = cluster_colors, radius=5, stroke=TRUE, weight=1)
# Remind yourself of what data look like - do you see evidence of spatial clustering?
pal = colorNumeric("Oranges", BF_malaria_data$prevalence)
leaflet(BF_malaria_data) %>% addTiles() %>% addCircleMarkers(~longitude, ~latitude, fillOpacity=1,
fillColor= ~pal(prevalence), radius=~prevalence*10, stroke=TRUE, weight=1) %>%
addLegend(pal = pal, values = ~prevalence)
# Calc prevalence
BF_malaria_data$prevalence <- BF_malaria_data$positives / BF_malaria_data$examined
# Remind yourself of what data look like - do you see evidence of spatial clustering?
pal = colorNumeric("Oranges", BF_malaria_data$prevalence)
leaflet(BF_malaria_data) %>% addTiles() %>% addCircleMarkers(~longitude, ~latitude, fillOpacity=1,
fillColor= ~pal(prevalence), radius=~prevalence*10, stroke=TRUE, weight=1) %>%
addLegend(pal = pal, values = ~prevalence)
leaflet(BF_malaria_data)  %>% addProviderTiles("Stamen.Toner") %>% addCircleMarkers(~longitude, ~latitude, fillOpacity=1,
fillColor= ~pal(prevalence), radius=~prevalence*10, stroke=TRUE, weight=1) %>%
addLegend(pal = pal, values = ~prevalence)
leaflet(BF_malaria_data)  %>% addProviderTiles("Stamen.Toner") %>% addCircleMarkers(~longitude, ~latitude, fillOpacity=0.7,
fillColor= ~pal(prevalence), radius=~prevalence*10, stroke=TRUE, weight=1) %>%
addLegend(pal = pal, values = ~prevalence)
# SAME AS
leaflet() %>% addProviderTiles("Stamen.Toner") %>% addCircleMarkers(BF_malaria_data$longitude, BF_malaria_data$latitude, fillOpacity =0.7,
fillColor = pal(BF_malaria_data$prevalence), radius = BF_malaria_data$prevalence*10, weight=1) %>%
addLegend(pal = pal, values=BF_malaria_data$prevalence)
leaflet(BF_malaria_data)  %>% addProviderTiles("Stamen.TonerLite") %>% addCircleMarkers(~longitude, ~latitude, fillOpacity=0.7,
fillColor= ~pal(prevalence), radius=~prevalence*10, stroke=TRUE, weight=1) %>%
addLegend(pal = pal, values = ~prevalence)
leaflet(BF_malaria_data) %>% addProviderTiles("Stamen.TonerLite") %>%  addCircleMarkers(~longitude, ~latitude,
color = cluster_colors, radius=5, stroke=TRUE, weight=1)
leaflet(BF_malaria_data) %>% addProviderTiles("Stamen.TonerLite") %>%
addCircleMarkers(~longitude, ~latitude,
color = cluster_colors, radius=5, stroke=TRUE, weight=1) %>%
addLegend(colors = c("red", "blue"), labels = c("Hotspot", "Not hotspot"))
leaflet(BF_malaria_data)  %>% addProviderTiles("Stamen.TonerLite") %>% addCircleMarkers(~longitude, ~latitude, fillOpacity=0.7,
fillColor= ~pal(prevalence), radius=~prevalence*10, stroke=TRUE, weight=1) %>%
addLegend(pal = pal, values = ~prevalence)
leaflet(BF_malaria_data) %>% addProviderTiles("Stamen.TonerLite") %>%
addCircleMarkers(~longitude, ~latitude,
color = cluster_colors, radius=5, stroke=TRUE, weight=1) %>%
addLegend(colors = c("red", "blue"), labels = c("Hotspot", "Not hotspot"))
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft")
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col=scot_col_pal(scotland$SMR), weight=2, fillOpacity = 0.6) %>%
addLegend(labels = c("<50", "50-100", "100-200", ">200"),
pal = scot_col_pal, values=scotland$SMR, title = "SMR",
"topleft")
# Plot
leaflet() %>% addProviderTiles("Stamen.Toner") %>%
addPolygons(data=scotland, col="gray", weight=2, fillOpacity = 0.6) %>%
addPolygons(data=scotland[cluster_pois,],
color = "red")
?scotalnd
?scotland
?spscan.test
?kulldorff
