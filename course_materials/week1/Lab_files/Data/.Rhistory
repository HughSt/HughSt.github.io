color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
hist(post_codes$foreecast_h2o_auto)
post_codes$foreecast_h2o_auto
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$forecast_h2o_auto), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
forecast_labels <- sprintf(
"<strong>%s</strong><br/>Forecast percent change %g",
post_codes$name, round((post_codes$forecast_gam_mod_no_time-1)*100,1)
) %>% lapply(htmltools::HTML)
labels_2015 <- sprintf(
"<strong>%s</strong><br/>Actual percent change %g",
post_codes$name, round((post_codes$x.2017-1)*100,1)
) %>% lapply(htmltools::HTML)
# define palette
col_pal <- colorBin(rev(colorRampPalette(ochre_palettes[["olsen_seq"]])(10)),
bins = c(0.98, seq(1,2, 0.1)),
na.color = NA)
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$forecast_h2o_auto), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
summary(post_codes$x.2017)
-0.5*100
# define palette
col_pal <- colorBin(rev(colorRampPalette(ochre_palettes[["olsen_seq"]])(10)),
bins = seq(-0.5, 2, 0.2),
na.color = NA)
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$forecast_h2o_auto), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
seq(-0.5, 2, 0.2)
col_pal <- colorBin(rev(colorRampPalette(ochre_palettes[["olsen_seq"]])(10)),
bins = seq(-0.5, 1.5, 0.2),
na.color = NA)
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$forecast_h2o_auto), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
# Load demo data
load("UV_USA_airports.RData") # object called input
getwd()
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
?box-orient
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
?column
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
?strong
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-tz-bldg-ui')
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
## Map malaria vector data
read.csv("/Users/hughsturrock/Downloads/Anopheline_data.csv")
## Map malaria vector data
vec_data <- read.csv("/Users/hughsturrock/Downloads/Anopheline_data.csv")
library(leaflet)
leafet() %>% addTiles() %>%
addCircleMarkers(vec_data$longitude, vec_data$latitude)
leaflet() %>% addTiles() %>%
addCircleMarkers(vec_data$longitude, vec_data$latitude)
leaflet() %>% addTiles() %>%
addCircleMarkers(vec_data$longitude, vec_data$latitude, radius=1, weight=1)
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
library(leaflet)
library(wesanderson)
# Get elevation for Rwanda
alt <- raster::getData('alt', country="RWA")
# Define color palette
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64], values(alt))
leaflet() %>%
addTiles() %>%
addRasterImage(alt, col = col_pal) %>%
addLegend(pal = col_pal, values = values(alt))
alt <- raster::getData('alt', country="RWA")
pal <- colorRampPalette(ochre_palettes[["winmar"]])(64)
library(ochRe)
alt <- raster::getData('alt', country="RWA")
pal <- colorRampPalette(ochre_palettes[["winmar"]])(64)
col_pal <- colorNumeric(pal, values(alt))
leaflet() %>% addTiles() %>% addRasterImage(alt, col = col_pal)
leaflet() %>% addTiles() %>% addRasterImage(alt, col = col_pal) %>%
addLegend(pal = col_pal, values = values(alt))
leaflet() %>% addTiles() %>% addRasterImage(alt, col = col_pal) %>%
addLegend(pal = col_pal, values = values(alt), "topleft")
?addProviderTiles
LULC <- raster("https://www.dropbox.com/s/hc9m6ac3kb845ip/BF_land_use.tif?dl=1")
library(ochRe)
ochre_palettes
plot(ochre_palettes)
?ochre_palettes
plot(LULC)
table(LULC)
table(LULC[])
plot(LULC, col = ochre_pal("emu_woman_paired"))
ochre_pal("emu_woman_paired")
classes <- as.numeric(as.character(LULC[]))
ochre_pal("emu_woman_paired")[1:8]
ochre_pal("emu_woman_paired")
?ochre_pal
ochre_pal("emu_woman_paired")(14)
plot(LULC, col = ochre_pal("emu_woman_paired")(14))
adm1 <- raster::getData("GADM", country="BFA", level=1)
lines(adm1)
projectRaster(LULC, adm1)
?projectRaster
projectRaster(LULC, crs(adm1))
projectRaster(LULC, CRS(adm1))
crs(adm1)
CRS(adm1)
projectRaster(LULC, crs=crs(adm1), method="ngb")
plot(LULC, col = ochre_pal("emu_woman_paired")(14)
adm1 <- raster::getData("GADM", country="BFA", level=1)
plot(LULC, col = ochre_pal("emu_woman_paired")(14))
lines(adm1)
elev <- getData("alt", country=BFA)
elev <- getData("alt", country="BFA")
projectRaster(LULC, elev, method="ngb")
plot(LULC, col = ochre_pal("emu_woman_paired")(14))
lines(adm1)
LULC <- projectRaster(LULC, crs(adm1), method="ngb")
crs(adm1)
LULC <- projectRaster(LULC, crs=crs(adm1), method="ngb")
LULC
plot(LULC, col = ochre_pal("emu_woman_paired")(14))
lines(adm1)
lines(adm1[1,], col="red")
lines(adm1[2,], col="red")
lines(adm1[3,], col="red")
lines(adm1[4,], col="red")
LULC_crop <- crop(LULC, adm1[4,])
plot(LULC_crop)
LULC_crop <- crop(LULC, adm1[4,],col = ochre_pal("emu_woman_paired")(14))
plot(LULC_crop,col = ochre_pal("emu_woman_paired")(14))
# Clsuter analysis
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(lat=0.509227, lng=29.432802, radius = 5, col="red")
# Clsuter analysis
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(lat=0.509227, lng=29.432802, radius = 50, col="red")
# Clsuter analysis
leaflet() %>%
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(lat=0.509227, lng=29.432802, radius = 50, col="red") %>%
addCircleMarkers(lat=0.5093, lng=29.4329, radius = 100, col="red")
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(lat=0.509227, lng=29.432802, radius = 50, col="red") %>%
addCircleMarkers(lat=0.5099, lng=29.434, radius = 100, col="red")
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(lat=0.509227, lng=29.432802, radius = 50, col="red") %>%
addCircleMarkers(lat=0.52, lng=29.44, radius = 100, col="red")
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(lat=0.509227, lng=29.432802, radius = 50, col="red") %>%
addCircleMarkers(lat=0.51, lng=29.445, radius = 100, col="red")
# Define color palette
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64], values(alt))
leaflet() %>%
addTiles() %>%
addRasterImage(alt, col = col_pal) %>%
addLegend(pal = col_pal, values = values(alt)) %>%
addScaleBar()
leaflet() %>%
addTiles() %>%
addRasterImage(alt, col = col_pal) %>%
addLegend(pal = col_pal, values = values(alt)) %>%
addScaleBar("topleft")
?addScaleBar
getwd()
raster::getData("GADM", country="AGO", level=0)
raster::getData("GADM", country="AGO", level=1)
raster::getData("GADM", country="RWD", level=1)
raster::getData("GADM", country="RWA", level=1)
raster::getData("GADM", country="CDI", level=1)
raster::getData("GADM", country="CIV", level=1)
ccodes()
raster::getData("GADM", country="COL", level=1)
rm(list=ls())
getwd()
setwd("/Users/hughsturrock/Documents/Work/MEI/DiSARM/GitRepos/spatial-epi-course")
setwd("/Users/hughsturrock/Documents/Work/MEI/DiSARM/GitRepos/spatial-epi-course/Data")
setwd("/Users/hughsturrock/Documents/Work/MEI/DiSARM/GitRepos/spatial-epi-course/course_materials/week1/Data")
##Plotting Point Data
#Import the data
BF_malaria_data <- read.csv("BF_malaria_data.csv",
header=T)
library(sp)
library(raster)
library(rgdal)
##Plotting Point Data
#Import the data
BF_malaria_data <- read.csv("BF_malaria_data.csv",
header=T)
View(BF_malaria_data)
head(BF_malaria_data) # gives you the first few rows
names(BF_malaria_data) # gives you the column names
# If you want to create a new variable, you can use the $ sign
#Example: Prevalence
BF_malaria_data$infection_prevalence <- BF_malaria_data$positives / BF_malaria_data$examined
View(BF_malaria_data)
#Create a histogram of the prevalence
hist(BF_malaria_data$infection_prevalence)
#Create a histogram of the prevalence
hist(BF_malaria_data$infection_prevalence, breaks=10)
#Create a histogram of the prevalence
hist(BF_malaria_data$infection_prevalence, breaks=20)
# Use R's basic plotting function to plot
plot(BF_malaria_data$longitude, BF_malaria_data$latitude,
ylab = "Latitude", xlab="Longitude") #boring!
# Use the cex function to plot circle size as a function of a variable
plot(BF_malaria_data$longitude, BF_malaria_data$latitude,
cex=BF_malaria_data$infection_prevalence,
ylab = "Latitude", xlab="Longitude (decimal degrees)")
cut(BF_malaria_data$infection_prevalence, 4)
#Manipulate the prevalence column so the data is divided into 4 classes
prev_class <- as.numeric(cut(BF_malaria_data$infection_prevalence, 4))
prev_class
#Add color
color_class <- c("blue", "yellow", "orange", "red")
color_class
color_class[1]
color_class[3]
color_class[c(1,3)]
color_class[prev_class]
# Do some research on your own... what does the cex function do?
plot(BF_malaria_data$longitude, BF_malaria_data$latitude,
cex=BF_malaria_data$infection_prevalence,
ylab = "Latitude", xlab="Longitude",
col=color_class[prev_class])
plot(BF_malaria_data$longitude, BF_malaria_data$latitude,
cex=BF_malaria_data$infection_prevalence,
ylab = "Latitude", xlab="Longitude",
col=color_class[prev_class],
pch=12)
# With filled circles
plot(BF_malaria_data$longitude, BF_malaria_data$latitude,
cex=BF_malaria_data$infection_prevalence,
ylab = "Latitude", xlab="Longitude",
col=color_class[prev_class],
pch=16)
# Use the cex function to plot
# Do some research on your own... what does the cex function do?
plot(BF_malaria_data$longitude, BF_malaria_data$latitude,
cex=BF_malaria_data$infection_prevalence,
ylab = "Latitude", xlab="Longitude",
col=color_class[prev_class])
# With filled circles
plot(BF_malaria_data$longitude, BF_malaria_data$latitude,
cex=BF_malaria_data$infection_prevalence,
ylab = "Latitude", xlab="Longitude",
col=color_class[prev_class],
pch=16)
# With larger filled circles
plot(BF_malaria_data$longitude, BF_malaria_data$latitude,
cex=BF_malaria_data$infection_prevalence*2,
ylab = "Latitude", xlab="Longitude",
col=color_class[prev_class],
pch=16)
##Creating a SpatialPointsDataFrame
# Let's make a SpatialPointsDataFrame object (useful for other operations)
BF_malaria_data_SPDF <- SpatialPointsDataFrame(coords = BF_malaria_data[,c("longitude", "latitude")],
data = BF_malaria_data[,c("examined", "positives")],
proj4string = CRS("+init=epsg:4326")) # WGS 1984 using lat/long. Optional but good to specify
BF_malaria_data_SPDF
BF_malaria_data_SPDF@coords
BF_malaria_data_SPDF@data
# You can quickly access the data frame as per a standard data frame, e.g.
BF_malaria_data_SPDF$infection_prevalence
##Creating a SpatialPointsDataFrame
# Let's make a SpatialPointsDataFrame object (useful for other operations)
BF_malaria_data_SPDF <- SpatialPointsDataFrame(coords = BF_malaria_data[,c("longitude", "latitude")],
data = BF_malaria_data[,c("examined", "positives", "infection_prevalence")],
proj4string = CRS("+init=epsg:4326")) # WGS 1984 using lat/long. Optional but good to specify
##Creating a SpatialPointsDataFrame
# Let's make a SpatialPointsDataFrame object (useful for other operations)
BF_malaria_data_SPDF <- SpatialPointsDataFrame(coords = BF_malaria_data[,c("longitude", "latitude")],
data = BF_malaria_data[,c("examined", "positives", "infection_prevalence")],
proj4string = CRS("+init=epsg:4326")) # WGS 1984 using lat/long. Optional but good to specify
# Summary of object
BF_malaria_data_SPDF
# SPDFs partition data elements, e.g. the coordinates are stored separately from the data
BF_malaria_data_SPDF@coords
BF_malaria_data_SPDF@data
# You can quickly access the data frame as per a standard data frame, e.g.
BF_malaria_data_SPDF$infection_prevalence
BF_malaria_data_SPDF@data$infection_prevalence
# You can use the plot or spplot function to get quick plots
plot(BF_malaria_data_SPDF)
spplot(BF_malaria_data_SPDF, zcol = "infection_prevalence")
# The readOGR function is useful for reading in spatial files such as shapefiles and GeoJSON
# For example, here we can read in admin 1 level data for Burkina Faso
BF_Adm_1 <- readOGR("BF_Adm_1_shapefile", "BF_Adm_1")
BF_Adm_1
BF_Adm_1 <- raster::getData("GADM", country="BFA", level=1) # Same file as read in on line
plot(BF_Adm_1)
points(BF_malaria_data$longitude, BF_malaria_data$latitude,
cex=BF_malaria_data$infection_prevalence*2,
ylab = "Latitude", xlab="Longitude",
col=color_class[prev_class],
pch=16)
library(leaflet)
#You can use one of several basemaps
leaflet() %>% addTiles("https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}")
leaflet() %>% addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png")
#Let's choose a simple one
basemap <- leaflet() %>% addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png")
basemap
#You can use the 'piping' command %>% to add layers
#As our point and polygon data are already SP object this is easy
basemap %>% addPolygons(data=BF_Adm_1)
?addPolygons
#Can you play with the way it plots?
# e.g. to change the colors/line weight
basemap %>% addPolygons(data=BF_Adm_1, color = "red",
weight = 1, fillOpacity = 0.2)
basemap %>% addPolygons(data=BF_Adm_1,
popup = BF_Adm_1$NAME_1)
basemap %>% addPolygons(data=BF_Adm_1, weight = 2,
popup = BF_Adm_1$NAME_1) %>%
addCircleMarkers(data=BF_malaria_data_SPDF,
color="red", radius = 2)
library(oro.nifti) # for a nice color palette
colorPal <- colorQuantile(tim.colors(), BF_malaria_data_SPDF$infection_prevalence, n = 4)
# colorPal is now a function you can apply to get the corresponding
# color for a value
colorPal(0.1)
# colorPal is now a function you can apply to get the corresponding
# color for a value
colorPal(0.9)
colorPal(BF_malaria_data_SPDF$infection_prevalence)
basemap %>% addPolygons(data=BF_Adm_1, weight = 2, fillOpacity=0,
popup = BF_Adm_1$NAME_1) %>%
addCircleMarkers(data=BF_malaria_data_SPDF,
color = colorPal(BF_malaria_data_SPDF$infection_prevalence),
radius = 2,
popup = as.character(BF_malaria_data_SPDF$infection_prevalence))
# Might want to add a legend. This just goes on as another layer
# First calculate the labels. In this case, the quantiles of prevalence
prev_quantiles <- quantile(BF_malaria_data_SPDF$infection_prevalence,
prob = seq(0,1,0.25))
prev_quantiles
colorPal
# Might want to add a legend. This just goes on as another layer
# First calculate the labels. In this case, the quantiles of prevalence
prev_quantiles <- quantile(BF_malaria_data_SPDF$infection_prevalence,
prob = seq(0,1,0.25))
prev_quantiles
basemap %>% addPolygons(data=BF_Adm_1, weight = 2, fillOpacity=0,
popup = BF_Adm_1$NAME_1) %>%
addCircleMarkers(data=BF_malaria_data_SPDF,
color = colorPal(BF_malaria_data_SPDF$infection_prevalence),
radius = 2,
popup = as.character(round(BF_malaria_data_SPDF$infection_prevalence,2))) %>%
addLegend(colors=tim.colors(4),
labels = c("<26%", "26 - 45%", "45 - 67%", ">67%"))
basemap %>% addPolygons(data=BF_Adm_1, weight = 2, fillOpacity=0,
popup = BF_Adm_1$NAME_1) %>%
addCircleMarkers(data=BF_malaria_data_SPDF,
color = colorPal(BF_malaria_data_SPDF$infection_prevalence),
radius = 2,
popup = paste("<p>","Prevalence:",
round(BF_malaria_data_SPDF$infection_prevalence,2),
"<p>"))
##Plotting Raster Data
# Import the raster file
elev <- raster("elev_BFA.tif")
elev
0.008333333*111
# You can plot using the standard plot function
plot(elev)
# ...and you can use leaflet
basemap %>% addRasterImage(elev)
basemap %>% addRasterImage(elev, heat.colors())
basemap %>% addRasterImage(elev, topo.colors())
basemap %>% addRasterImage(elev, topo.colors(64))
# You can plot using the standard plot function
plot(elev)
# ...and you can use leaflet
basemap %>% addRasterImage(elev, col = topo.colors())
# ...and you can use leaflet
basemap %>% addRasterImage(elev)
# If you want to add a legend, you have to define the color palette first
raster_colorPal <- colorNumeric(topo.colors(64), values(elev), na.color = NA)
raster_colorPal(500)
basemap %>% addRasterImage(elev, color = raster_colorPal) %>%
addLegend(values = values(elev), pal = raster_colorPal)
# If you want to export the data, there are several options.
# 1. Export button
# 2. Save as kml for someone to open in Google Earth
library(plotKML)
install.packages("plotKML")
# If you want to export the data, there are several options.
# 1. Export button
# 2. Save as kml for someone to open in Google Earth
library(plotKML)
plotKML(BF_malaria_data_SPDF) # see ?plotKML for more options
# Import the raster file
elev <- raster("elev_BFA.tif")
# Can also use the raster package getData function (very useful!)
elev <- raster::getData("alt", country="BFA")
elev
# You can plot using the standard plot function
plot(elev)
# ...and you can use leaflet
basemap %>% addRasterImage(elev)
# If you want to add a legend, you have to define the color palette first
raster_colorPal <- colorNumeric(topo.colors(64), values(elev), na.color = NA)
raster_colorPal(500)
basemap %>% addRasterImage(elev, color = raster_colorPal) %>%
addLegend(values = values(elev), pal = raster_colorPal)
# If you want to export the data, there are several options.
# 1. Export button
# 2. Save as kml for someone to open in Google Earth
library(plotKML)
plotKML(BF_malaria_data_SPDF) # see ?plotKML for more options
